// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) 
  name String
  email String @unique
  password String
  status Boolean @default(true)
  profile_id String 
  profile Profile @relation(fields: [profile_id], references: [id])
  order_service OrderService[]
  created_at DateTime @default(now())
  updated_at DateTime?
  company Company[]
  token String?
  image_url String?
  filename String?
  extension String?
  technical_accompaniments TechnicalAccompaniments[]
  @@map("users")
}

model Company {
  id String @id @default(cuid())
  cin String @unique
  name String
  fantasy String
  email String
  created_at DateTime @default(now())
  updated_at DateTime?
  user User[]
  order_service OrderService[]
  customers Customers []
  @@map("companies")
}

model Profile {
  id String @id @default(cuid())
  name String @unique
  description String
  created_at DateTime @default(now())
  updated_at DateTime?
  user User[]
  @@map("profiles")
}


model OrderService {
  id Int @id @default(autoincrement())
  description String
  status_id String 
  status Status @relation(fields: [status_id], references: [id])
  identification_number String?
  serie_number String?
  user_id String 
  user User @relation(fields: [technician_id], references: [id])
  date_entry DateTime
  departure_date DateTime?
  technician_id String
  images Image[]
  history_order_service HistoryOrderService []
  company_id String
  company Company @relation(fields: [company_id], references: [id])
  customers_id String
  customers Customers @relation(fields: [customers_id], references: [id])
  solution String?
  technical_accompaniments TechnicalAccompaniments[]
  @@map("order_services")
}

model Status {
  id String @id @default(cuid())
  name String @unique
  description String
  order_service OrderService[]
  created_at DateTime @default(now())
  updated_at DateTime?
  @@map("status")
}

model Image {
  id String @id @default(cuid())
  filename String
  extension String
  url String
  order_id Int 
  order_service OrderService @relation(fields: [order_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  @@map("images")
}

model HistoryOrderService {
  id String @id @default(cuid())
  description String
  order_id Int
  order_service OrderService @relation(fields: [order_id], references: [id], onDelete: Cascade)
  date DateTime @default(now())
  @@map("history_order_service")
}


model Customers {
  id String @id @default(cuid())
  name String
  fantasy_name String
  identification_number String @unique
  legal_person Boolean
  email String @unique
  company_id String
  image_url String?
  filename String?
  extension String?
  company Company @relation(fields: [company_id], references: [id])
  order_service OrderService[]
  @@map("customers")
}

model TechnicalAccompaniments {
  id String @id @default(cuid())
  description String
  date DateTime @default(now())
  order_service_id Int
  order_service OrderService @relation(fields: [order_service_id], references: [id], onDelete: Cascade)
  user_id String
  user User @relation(fields: [user_id], references: [id])
  @@map("technical_accompaniments")
}


